crystal-audio=[javadoc:com.liferay.faces.crystal.component.Audio] is a [javadoc:javax.faces.component.UIComponent] component that renders a `&lt;div&gt;` that contains an HTML5 `&lt;audio&gt;` element. It also supports graceful degradation for older browsers.
crystal-audio-general=The general usage of the component is to set the [vdldoc:crystal:audio:value] attribute to a [javadoc:java.lang.String] audio URL. Degradation to a Flash player can be enabled via the [vdldoc:crystal:audio:degrade] attribute (defaults to true). 
crystal-audio-general-example-1=Context-relative path to a resource via the [vdldoc:crystal:audio:value] attribute
crystal-audio-general-example-2=JSF resource via the `#{resource}` EL keyword
crystal-audio-general-example-3=JSF resource via the Crystal [javadoc:com.liferay.faces.crystal.component.resource.Resource] component
crystal-audio-general-example-4=JSF resource via the [vdldoc:crystal:audio:library] and [vdldoc:crystal:audio:name] attributes
crystal-audio-graceful-degradation=The component supports graceful degradation for older browsers using the <a href="http://get.adobe.com/flashplayer/" target="_blank">Adobe&reg; Flash&reg; Player</a> bundled with CrystalUI. If no value is specified in the `&lt;crystal:audio&gt;` tag, then the audio from the first child `&lt;crystal:resource&gt;` tag is used.<br/><br/>A different player can be specified via the [vdldoc:crystal:video:flashPlayer] attribute. Additional  `&lt;param&gt;` tags can be inserted into the Adobe&reg; Flash&reg player's `&lt;object&gt;` tag by specifying an [vdldoc:f:facet] with `name="flash"`. <br/><br/><em>Adobe&reg; Flash&reg; is a registered trademark of Adobe Systems Incorporated.</em>
crystal-audio-graceful-degradation-example-1=Adobe&reg; Flash&reg; Player<br/>(Pre-HTML5 Browser Required)
crystal-audio-alternate-formats=The component supports supplying alternate audio formats to support different browsers.
crystal-audio-alternate-formats-example-1=Supplying alternate audio formats via [vdldoc:crystal:resource] child tags.
crystal-audio-alternate-formats-example-2=Supplying alternate audio formats via supplying a collection of Crystal [javadoc:com.liferay.faces.crystal.component.resource.Resource]s in the [vdldoc:crystal:audio:value] attribute.
crystal-audio-html5-passthrough=The component can be utilized as an HTML5 passthrough element. *(Requires JSF 2.2+)*
crystal-body=[javadoc:com.liferay.faces.crystal.component.body.Body] is a [javadoc:javax.faces.component.UIOutput] that renders a `&lt;body&gt;` element for webapps and a `&lt;div&gt;` for portlets.<br/><br/>Since it extends [javadoc:javax.faces.component.html.HtmlBody], it supports all the features of [vdldoc:h:body]. However, *the main benefit* of using [vdldoc:crystal:body] is that scripts specified by `&lt;crystal:outputScript target="body" /&gt;` as well as JavaScript closures rendered by Liferay Faces Crystal components are rendered as a single `&lt;script&gt;...&lt;/script&gt;` just before the closing `&lt;/body&gt;` tag.
crystal-body-general=The usage of [vdldoc:crystal:body] in webapps is the same as with portlets. However, the surrounding tag in a webapp is `&lt;html&gt;` whereas the surrounding tag in a portlet is [vdldoc:f:view].
crystal-button=[javadoc:com.liferay.faces.crystal.component.button.Button] is a [javadoc:javax.faces.component.UIOutput] component that renders a styleable HTML `&lt;button&gt;` element. The default [vdldoc:crystal:button:type] is `button`. Since it extends [javadoc:javax.faces.component.html.HtmlOutcomeTargetButton], it supports all the features of [vdldoc:h:button]. The component does *not need to be a child* of `h:form` since the [vdldoc:crystal:button:outcome] attribute is designed to navigate via HTTP GET.
crystal-button-general=*Children* such as [vdldoc:crystal:icon], [vdldoc:crystal:outputText], and [vdldoc:h:graphicImage] can be specified for styling purposes. Alternatively, the [vdldoc:crystal:button:image] and [vdldoc:crystal:button:value] attributes can be specified for styling purposes.
crystal-button-general-example-1=Styling via children
crystal-button-general-example-2=Styling via [vdldoc:crystal:button:image] attribute
crystal-button-general-example-3=Styling via [vdldoc:crystal:button:value] attribute
crystal-button-navigation=The component can be used to *navigate* between pages with the [vdldoc:crystal:button:outcome] attribute. Setting [vdldoc:crystal:button:includeViewParams]=`true` will automatically include all of the [vdldoc:f:viewParam] tags (view parameters) as URL parameters.
crystal-button-param=URL *parameters* can be specified via [vdldoc:f:param] child tags. Setting [vdldoc:crystal:button:includeViewParams]=`true` will automatically include all of the [vdldoc:f:viewParam] tags (view parameters) as URL parameters.
crystal-button-various-styles=The component can be *styled* with Bootstrap class names as described in the <a href="http://liferay.github.io/crystal-bootstrap/base-css.html#buttons" target="_blank">Crystal Base CSS</a> documentation.
crystal-buttonrow=[javadoc:com.liferay.faces.portal.component.buttonrow.ButtonRow] is a [javadoc:javax.faces.component.UIPanel] component that renders a `&lt;div&gt;` element for grouping purposes. Since it extends [javadoc:javax.faces.component.html.HtmlPanelGroup], it supports all the features of [vdldoc:h:panelGroup].
crystal-buttonrow-general=Buttons are arranged in a row by specifying [vdldoc:crystal:button] child tags.
crystal-commandbutton=[javadoc:com.liferay.faces.crystal.component.commandbutton.CommandButton] is a [javadoc:javax.faces.component.UICommand] component that renders a styleable HTML `&lt;button&gt;` element. The default [vdldoc:crystal:commandButton:type] is `submit`. Since it extends [javadoc:javax.faces.component.html.HtmlCommandButton], it supports all the features of [vdldoc:h:commandButton]. The component *must be a child* of [vdldoc:h:form] in order to trigger the [vdldoc:crystal:commandButton:action] or [vdldoc:crystal:commandButton:actionListener]. In order to provide a *Rich Internet Application* (RIA) experience for the end-user, the following attributes are set by default:<ul><li>[vdldoc:crystal:commandButton:ajax]=`"true"`</li><li>[vdldoc:crystal:commandButton:execute]/[vdldoc:crystal:commandButton:process]=`"@all"`</li><li>[vdldoc:crystal:commandButton:render]/[vdldoc:crystal:commandButton:update]=`"@none"`</li></ul>
crystal-commandbutton-general=*Children* such as [vdldoc:crystal:icon], [vdldoc:crystal:outputText], and [vdldoc:h:graphicImage] can be specified for styling purposes. Alternatively, the [vdldoc:crystal:commandButton:image] and [vdldoc:crystal:commandButton:value] attributes can be specified for styling purposes.
crystal-commandbutton-general-example-1=Styling via children
crystal-commandbutton-general-example-2=Styling via [vdldoc:crystal:commandButton:image] attribute
crystal-commandbutton-general-example-3=Styling via [vdldoc:crystal:commandButton:value] attribute
crystal-commandbutton-immediate=When the [vdldoc:crystal:commandButton:immediate] attribute is `true`, the [vdldoc:crystal:commandButton:action] and [vdldoc:crystal:commandButton:actionListener] callbacks execute during the *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal INVOKE_APPLICATION phase.
crystal-commandbutton-navigation=The component can be used to *navigate* between pages with the [vdldoc:crystal:commandbutton:action] attribute. By specifying a `&lt;redirect&gt;` element in the `navigation-rule`, it will utilize the POST/REDIRECT/GET pattern.
crystal-commandbutton-param=URL *parameters* can be specified via the [vdldoc:crystal:commandbutton:action] attribute. By specifying a `faces-redirect=true` parameter in the action attribute, it will utilize the POST/REDIRECT/GET pattern.
crystal-commandbutton-value-attribute=Although the component&apos;s [vdldoc:crystal:commandButton:value] attribute is *read-only* (can&apos;t be changed via form submission), it can be used to determine that an item has been selected by the user.
crystal-commandbutton-various-styles=The component can be *styled* with Bootstrap class names as described in the <a href="http://liferay.github.io/crystal-bootstrap/base-css.html#buttons" target="_blank">Crystal Base CSS</a> documentation.
crystal-commandlink=[javadoc:com.liferay.faces.crystal.component.commandlink.CommandLink] is a [javadoc:javax.faces.component.UICommand] component that renders an `&lt;a&gt;` element. Since it extends [javadoc:javax.faces.component.html.HtmlCommandLink], it supports all the features of [vdldoc:h:commandLink]. The component *must be a child* of [vdldoc:h:form] in order to trigger the [vdldoc:crystal:commandLink:action] or [vdldoc:crystal:commandLink:actionListener]. In order to provide a *Rich Internet Application* (RIA) experience for the end-user, the following attributes are set by default:<ul><li>[vdldoc:crystal:commandLink:ajax]=`"true"`</li><li>[vdldoc:crystal:commandLink:execute]/[vdldoc:crystal:commandLink:process]=`"@all"`</li><li>[vdldoc:crystal:commandLink:render]/[vdldoc:crystal:commandLink:update]=`"@none"`</li></ul>
crystal-commandlink-general=*Children* such as [vdldoc:crystal:icon], [vdldoc:crystal:outputText], and [vdldoc:h:graphicImage] can be specified for visual purposes. Alternatively, the [vdldoc:crystal:commandLink:value] attribute can be specified.
crystal-commandlink-general-example-1=Styling via children
crystal-commandlink-general-example-2=Styling via [vdldoc:crystal:commandButton:value] attribute
crystal-commandlink-immediate=When the [vdldoc:crystal:commandLink:immediate] attribute is `true`, the [vdldoc:crystal:commandLink:action] and [vdldoc:crystal:commandLink:actionListener] callbacks execute during the *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal INVOKE_APPLICATION phase.
crystal-commandlink-navigation=The component can be used to *navigate* between pages with the [vdldoc:crystal:commandLink:action] attribute. By specifying a `&lt;redirect&gt;` element in the `navigation-rule`, it will utilize the POST/REDIRECT/GET pattern.
crystal-commandlink-param=URL *parameters* can be specified via the [vdldoc:crystal:commandLink:action] attribute. By specifying a `faces-redirect=true` parameter in the action attribute, it will utilize the POST/REDIRECT/GET pattern.
crystal-commandlink-value-attribute=Although the component&apos;s [vdldoc:crystal:commandLink:value] attribute is *read-only* (can&apos;t be changed via form submission), it can be used to determine that an item has been selected by the user.
crystal-datalist=[javadoc:com.liferay.faces.crystal.component.datalist.DataList] is a [javadoc:javax.faces.component.UIData] (iterator) component that renders `&lt;ul&gt;` (unordered), `&lt;ol&gt;` (ordered), or `&lt;dl&gt;` (description) lists.
crystal-datalist-data-model=Since it extends [javadoc:javax.faces.component.UIData], it can render list items *dynamically* when the [vdldoc:crystal:dataItem] content is set via EL to a model bean property (which is wrapped implicitly by JSF with a [javadoc:javax.faces.model.DataModel]). The [vdldoc:crystal:dataList:var] attribute can be used to introduce a variable name into the EL when iterating over the model. When [vdldoc:crystal:dataList:type]=`description` an optional [vdldoc:f:facet] with [vdldoc:f:facet:name]=`description` can be used to render `&lt;dd&gt;` description tags.
crystal-datalist-general=The type of list is specified via the [vdldoc:crystal:dataList:type] attribute. List items are specified with child [vdldoc:crystal:dataItem] tags.
crystal-datalist-general-example-1=Specifying [vdldoc:crystal:dataList:type]=`unordered` (the default)
crystal-datalist-general-example-2=Specifying [vdldoc:crystal:dataList:type]=`ordered`
crystal-datalist-general-example-3=Specifying [vdldoc:crystal:dataList:type]=`description`
crystal-datalist-selection=You can use children in your [vdldoc:crystal:dataItem]s to create a selection list with actionListeners.
crystal-datatable=[javadoc:com.liferay.faces.crystal.component.datatable.DataTable] is a [javadoc:javax.faces.component.UIData] (iterator) component that renders a `table` element with tabular data and is designed to be used in conjunction with [vdldoc:crystal:column] child component tags. Since it extends [javadoc:javax.faces.component.html.HtmlDataTable], it supports all the features of [vdldoc:h:dataTable].
crystal-datatable-general=The [vdldoc:crystal:dataTable:value] attribute tag must be bound via EL to a model bean property (which is wrapped implicitly by JSF with a [javadoc:javax.faces.model.DataModel]). The [vdldoc:crystal:dataTable:var] attribute is used to introduce a variable name into the EL when iterating over the model.
crystal-datatable-lazy=The table rows contained in the [javadoc:javax.faces.model.DataModel] can be fetched in a *lazy* (on-demand) manner by having the [vdldoc:crystal:dataTable:value] attribute bound via EL to an instance of [javadoc:com.liferay.faces.util.model.OnDemandDataModel]. The rows are fetched on the server-side whenever the user clicks on a pagination control, selects a sort column, or enters a filter.
crystal-datatable-pagination=The table rows contained in the [javadoc:javax.faces.model.DataModel] can be paginated with [vdldoc:crystal:paginator] and the number of rows per-page is controlled by the value of the [vdldoc:crystal:dataTable:rows] attribute.
crystal-field=[javadoc:com.liferay.faces.crystal.component.field.Field] is a [javadoc:javax.faces.component.UIPanel] component that renders a `&lt;div&gt;` element and a `&lt;label&gt;` element in order to wrap a field. Since it extends [javadoc:javax.faces.component.html.HtmlPanelGroup], it supports all the features of [vdldoc:h:panelGroup].
crystal-field-benefits-description=since it has a [vdldoc:crystal:field:label] attribute and provides *color-coded styling* based on the results of validation. 
crystal-field-general=A *label* can be specified via the [vdldoc:crystal:field:label] attribute. In addition, the [vdldoc:crystal:field:id] attribute is typically referenced by the [vdldoc:f:ajax] tag in order to re-render an input field and a corresponding message.<br/><br/>If a *child* input component like [vdldoc:crystal:inputText] fails validation, then the [javadoc:javax.faces.application.FacesMessage] that is queued for the child input will use the [vdldoc:crystal:field:label] of the field. This provides the end-user with a better context as to which input field failed validation.
crystal-field-general-example-1=Re-Rendering [vdldoc:crystal:field] via [vdldoc:f:ajax].
crystal-field-message-styling=The component will automatically be *styled* according to the most severe message that exists within it.
crystal-field-message-styling-example-1=`FacesMessage.SEVERITY_INFO`
crystal-field-message-styling-example-2=`FacesMessage.SEVERITY_WARN`
crystal-field-message-styling-example-3=`FacesMessage.SEVERITY_ERROR`
crystal-fieldset=[javadoc:com.liferay.faces.crystal.component.fieldset.Fieldset] is a [javadoc:javax.faces.component.UIPanel] component that renders a `&lt;fieldset&gt;` element in order to group form elements.
crystal-fieldset-general=A *header* for the component can be specified via the [vdldoc:crystal:fieldset:legend] attribute.
crystal-form=[javadoc:com.liferay.faces.crystal.component.form.Form] is a [javadoc:javax.faces.component.UIForm] component that renders a `&lt;form&gt;` element. Since it extends [javadoc:javax.faces.component.html.HtmlForm], it supports all the features of [vdldoc:h:form].
crystal-form-general=When an [vdldoc:crystal:form] is submitted via [vdldoc:crystal:commandButton] or [vdldoc:crystal:commandLink] it is submitted via Ajax by default.
crystal-form-non-ajax=Forms can be submitted via non-Ajax (full-page) postback by specifying [vdldoc:crystal:commandButton:ajax]=`false` for [vdldoc:crystal:commandButton] or [vdldoc:crystal:commandLink].
crystal-form-view-params= View Parameters can be automatically included in full-page postbacks by setting [vdldoc:crystal:form:includeViewParams]=`true`.
crystal-head=[javadoc:com.liferay.faces.crystal.component.head.Head] is a [javadoc:javax.faces.component.UIOutput] that renders a `&lt;head&gt;` element for webapps, but not for portlets. *In the case of portlets,* the presence of [vdldoc:crystal:head] informs the JSF portlet bridge that JSF resources with `target="head"` should be included in the `&lt;head&gt;` element rendered by the portal.<br/><br/>Since it extends [javadoc:javax.faces.component.html.HtmlHead], it supports all the features of [vdldoc:h:head]. However, *the main benefit* of using [vdldoc:crystal:head] instead of [vdldoc:h:head] is that all of the Liferay Faces Crystal resources (such as crystal.js) are automatically included in the `&lt;head&gt;` element.
crystal-head-general=The usage of [vdldoc:crystal:head] in webapps is the same as with portlets. However, the surrounding tag in a webapp is `&lt;html&gt;` whereas the surrounding tag in a portlet is [vdldoc:f:view].
crystal-icon=[javadoc:com.liferay.faces.crystal.component.icon.Icon] is a [javadoc:javax.faces.component.UIComponent] that renders a span which contains an icon specified by the [vdldoc:crystal:icon:name] attribute.
crystal-icon-general=The component displays an *icon* specified by the [vdldoc:crystal:icon:name] attribute. Names are described in the <a href="http://liferay.github.io/crystal-bootstrap/base-css.html#icons" target="_blank">Crystal Base CSS</a> documentation.
crystal-image=[javadoc:com.liferay.faces.crystal.component.image.Image] is a [javadoc:javax.faces.component.UIGraphic] component that renders an `&lt;img&gt;` element. Since it extends [javadoc:javax.faces.component.html.HtmlGraphicImage], it supports all the features of [vdldoc:h:image].
crystal-image-general=The [vdldoc:crystal:image:value] attribute can be *bound to a model bean property* via EL, bound to a JSF resource via the `#{resource}` EL keyword, or using the [vdldoc:crystal:image:library] and [vdldoc:crystal:image:name] attributes to specify a JSF resource.
crystal-image-general-example-1=Context-relative path to a resource via the [vdldoc:crystal:image:value] attribute 
crystal-image-general-example-2=JSF resource via the `#{resource}` EL keyword
crystal-image-general-example-3=JSF resource via the [vdldoc:crystal:image:library] and [vdldoc:crystal:image:name] attributes
crystal-image-general-example-4=Clickable areas via the [vdldoc:crystal:image:usemap] attribute
crystal-loadconstants=[javadoc:com.liferay.faces.crystal.taghandler.LoadConstants] is a [javadoc:javax.faces.view.facelets.TagHandler] which can obtain constants from Java for use in EL.
crystal-loadconstants-general=Constants can be imported from `class`, `enum`, or `interface` types and are kept in a thread-safe, application-scoped cache unless [vdldoc:crystal:loadConstants:cacheable]=`false`.
crystal-loadconstants-general-example-1=Importing from a Java class
crystal-loadconstants-general-example-2=Importing from a Java enum
crystal-loadconstants-general-example-3=Importing from a Java interface
crystal-inputfile=[javadoc:com.liferay.faces.crystal.component.inputfile.InputFile] is a [javadoc:javax.faces.component.UIInput] component that renders an `&lt;input&gt;` element with `type="file"`. Since it extends [javadoc:javax.faces.component.html.HtmlInputFile], it supports all the features of [vdldoc:h:inputFile] and also supports multi-file uploads, instant-Ajax, preview, upload progress, and validation.
crystal-inputfile-benefits-description=since it works in *portlet and webapp* environments and also supports preview, upload progress, and validation.
crystal-inputfile-general=By default, one file can be uploaded as a non-Ajax (full-page) postback. 
crystal-inputfile-instant-ajax=Files can be uploaded *instantly* via Ajax by setting [vdldoc:crystal:inputFile:auto]=`true` and by adding an [vdldoc:f:ajax] child tag. *Note:* this feature can only be used with JSF 2.2.
crystal-inputfile-multiple=Multi-file upload is supported by setting the HTML5 passthrough attribute [vdldoc:crystal:inputFile:multiple]=`multiple`. 
crystal-inputfile-preview=A client-side preview of selected filenames and sizes can be displayed by setting [vdldoc:crystal:inputFile:showPreview]=`true`. 
crystal-inputfile-progress=Upload progress is displayed by setting [vdldoc:crystal:inputFile:showProgress]=`true`. If [vdldoc:crystal:inputFile:appendNewFiles]=`true` then the selected files are appended to the preview table. Otherwise, the preview table is cleared when new files are selected. Files can be uploaded *instantly* via Ajax by setting auto=true and by adding an f:ajax child tag. One *potential drawback* of showing progress is that each file is uploaded in a separate XmlHttpRequest.
crystal-inputfile-validation=Validation is accomplished by adding an [vdldoc:crystal:validateFile] child tag. The [vdldoc:crystal:validateFile:contentTypes] attribute is a comma-delimited list of content types such as `application/pdf,image/png`. The [vdldoc:crystal:validateFile:maxFileSize] attribute is a [javadoc:java.lang.Long] integer that indicates the maximum number of bytes that can be uploaded for each file. 
crystal-inputfile-validation-example=Upload .pdf or .png files with max size of 600,000 bytes
crystal-inputhidden=[javadoc:com.liferay.faces.crystal.component.inputhiddenarea.InputHidden] is a [javadoc:javax.faces.component.UIInput] component that renders an `&lt;input&gt;` element with *type=*`hidden`. Since it extends [javadoc:javax.faces.component.html.HtmlInputHidden], it supports all the features of [vdldoc:h:inputHidden].
crystal-inputhidden-validation=The [vdldoc:crystal:inputHidden:value] attribute can be *validated* via the [vdldoc:crystal:inputHidden:validator] attribute or by specifying a [vdldoc:f:validator] type of child tag. In addition, custom user feedback can be specified via the [vdldoc:crystal:inputHidden:validatorMessage] attribute.
crystal-inputhidden-immediate=When the [vdldoc:crystal:inputHidden:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
crystal-inputhidden-conversion=The [vdldoc:crystal:inputHidden:value] attribute can be *converted* via the [vdldoc:crystal:inputHidden:converter] attribute or by specifying an [vdldoc:f:converter] type of child tag. In addition, custom user feedback can be specified via the [vdldoc:crystal:inputHidden:converterMessage] attribute.
crystal-inputhidden-general=The [vdldoc:crystal:inputHidden:value] attribute can be *bound to a model bean property* via EL.
crystal-inputsecret=[javadoc:com.liferay.faces.crystal.component.inputsecretarea.InputSecret] is a [javadoc:javax.faces.component.UIInput] component that renders an `&lt;input&gt;` element with *type=*`password`. Since it extends [javadoc:javax.faces.component.html.HtmlInputSecret], it supports all the features of [vdldoc:h:inputSecret].
crystal-inputsecret-general=The [vdldoc:crystal:inputSecret:value] attribute can be *bound to a model bean property* via EL.
crystal-inputsecret-immediate=When the [vdldoc:crystal:inputSecret:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
crystal-inputsecret-redisplay=The [vdldoc:crystal:inputSecret:redisplay] attribute indicates whether or not the [vdldoc:crystal:inputSecret:value] attribute is rendered to the response. For example, if *redisplay* is `true` then the component would be rendered like the following:<br/><br/><code>&lt;input type="secret" value="myPlainTextPassword" /&gt;</code><br/><br/>Since this is a !potential security risk!, the *default value* of the *redisplay* attribute is `false`. However, this has the side-effect of the user having to re-enter a value when validation fails. In order to provide a better user experience, avoid using [vdldoc:f:ajax:render]=`@form` to update the DOM. 
crystal-inputsecret-redisplay-example-1=Specifying [vdldoc:crystal:inputSecret:redisplay]=`false` (the default, which is secure) and re-rendering only specific components in the DOM
crystal-inputsecret-redisplay-example-2=Specifying [vdldoc:crystal:inputSecret:redisplay]=`true` !(potential security risk)! and re-rendering the entire form in the DOM
crystal-inputsecret-validation=The [vdldoc:crystal:inputSecret:value] attribute can be *validated* via the [vdldoc:crystal:inputSecret:validator] attribute or by specifying a [vdldoc:f:validator] type of child tag. In addition, custom user feedback can be specified via the [vdldoc:crystal:inputSecret:validatorMessage] attribute.
crystal-inputtext=[javadoc:com.liferay.faces.crystal.component.inputtextarea.InputText] is a [javadoc:javax.faces.component.UIInput] component that renders a field for editing *single-line text*. Since it extends [javadoc:javax.faces.component.html.HtmlInputText], it supports all the features of [vdldoc:h:inputText].
crystal-inputtext-conversion=The [vdldoc:crystal:inputText:value] attribute can be *converted* via the [vdldoc:crystal:inputText:converter] attribute or by specifying an [vdldoc:f:converter] type of child tag. In addition, custom user feedback can be specified via the [vdldoc:crystal:inputText:converterMessage] attribute.
crystal-inputtext-general=The [vdldoc:crystal:inputText:value] attribute can be *bound to a model bean property* via EL.
crystal-inputtext-immediate=When the [vdldoc:crystal:inputText:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
crystal-inputtext-validation=The [vdldoc:crystal:inputText:value] attribute can be *validated* via the [vdldoc:crystal:inputText:validator] attribute or by specifying an [vdldoc:f:validator] type of child tag. In addition, custom user feedback can be specified via the [vdldoc:crystal:inputText:validatorMessage] attribute.
crystal-inputtextarea=[javadoc:com.liferay.faces.crystal.component.inputtextarea.InputTextarea] is a [javadoc:javax.faces.component.UIInput] component that renders a field for editing *multi-line text*. Since it extends [javadoc:javax.faces.component.html.HtmlInputTextarea], it supports all the features of [vdldoc:h:inputTextarea].
crystal-inputtextarea-conversion=The [vdldoc:crystal:inputTextarea:value] attribute can be *converted* via the [vdldoc:crystal:inputTextarea:converter] attribute or by specifying an [vdldoc:f:converter] type of child tag. In addition, custom user feedback can be specified via the [vdldoc:crystal:inputTextarea:converterMessage] attribute.
crystal-inputtextarea-general=The [vdldoc:crystal:inputTextarea:value] attribute can be *bound to a model bean property* via EL.
crystal-inputtextarea-immediate=When the [vdldoc:crystal:inputTextarea:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
crystal-inputtextarea-right-to-left=The component supports *Right-To-Left* language input by setting the [vdldoc:crystal:inputTextarea:dir] and [vdldoc:crystal:inputTextarea:lang] attributes.
crystal-inputtextarea-size=The *size* of the rendered textarea can be specified via the [vdldoc:crystal:inputTextarea:rows] and [vdldoc:crystal:inputTextarea:cols] attributes, or via CSS using the [vdldoc:crystal:inputTextarea:styleClass] or [vdldoc:crystal:inputTextarea:style] attributes.
crystal-inputtextarea-size-example-1=Setting the size via the [vdldoc:crystal:inputTextarea:rows] and [vdldoc:crystal:inputTextarea:cols] attributes
crystal-inputtextarea-size-example-2=Setting the size via the [vdldoc:crystal:inputTextarea:style] attribute
crystal-inputtextarea-validation=The [vdldoc:crystal:inputTextarea:value] attribute can be *validated* via the [vdldoc:crystal:inputTextarea:validator] attribute or by specifying an [vdldoc:f:validator] type of child tag. In addition, custom user feedback can be specified via the [vdldoc:crystal:inputTextarea:validatorMessage] attribute.
crystal-link=[javadoc:com.liferay.faces.crystal.component.link.Link] is a [javadoc:javax.faces.component.UIOutcomeTarget] component that renders an `&lt;a&gt;` element (hyperlink). Since it extends [javadoc:javax.faces.component.html.HtmlLink], it supports all the features of [vdldoc:h:link].
crystal-link-benefits-description=is intended to be used to render a hyperlink that *navigates* to other JSF views via HTTP GET, or perhaps to re-render the same view with different *view parameters* via [vdldoc:f:param] child tags.
crystal-link-general=The text/content of the hyperlink can be specified via the [vdldoc:crystal:link:value] of the component or by specifying child components. Setting [vdldoc:crystal:link:includeViewParams]=`true` will automatically include all of the [vdldoc:f:viewParam] tags (view parameters) as URL parameters.
crystal-link-general-example-1=Specifying hyperlink text via the [vdldoc:crystal:link:value] attribute
crystal-link-general-example-2=Specifying children as hyperlink text/content
crystal-link-navigation=The component can be used to *navigate* between pages with the [vdldoc:crystal:link:outcome] attribute.  Setting [vdldoc:crystal:link:includeViewParams]=`true` will automatically include all of the [vdldoc:f:viewParam] tags (view parameters) as URL parameters.
crystal-link-param=URL *parameters* can be specified via [vdldoc:f:param] child tags. Setting [vdldoc:crystal:link:includeViewParams]=`true` will automatically include all of the [vdldoc:f:viewParam] tags (view parameters) as URL parameters.
crystal-message=[javadoc:com.liferay.faces.crystal.component.message.Message] is a [javadoc:javax.faces.component.UIMessage] component that renders a `&lt;span&gt;` element containing the text of a single [javadoc:javax.faces.application.FacesMessage] for an associated component. Since it extends [javadoc:javax.faces.component.html.HtmlMessage], it supports all the features of [vdldoc:h:message].
crystal-message-general=The component can be *associated* with an input component like [vdldoc:crystal:inputText] via the [vdldoc:crystal:message:for] attribute. If it is a child of [vdldoc:crystal:field] then it will be *automatically styled* when validation fails.
crystal-message-general-example-1=Re-Rendering [vdldoc:crystal:message] via [vdldoc:f:ajax]
crystal-messages=[javadoc:com.liferay.faces.crystal.component.message.Messages] is a [javadoc:javax.faces.component.UIMessages] component that renders the text of one or more [javadoc:javax.faces.application.FacesMessage] instances inside a `&lt;ul&gt;` element or `&lt;table&gt;` element for an associated component, according to the [vdldoc:crystal:messages:layout] attribute. Since it extends [javadoc:javax.faces.component.html.HtmlMessage], it supports all the features of [vdldoc:h:message].
crystal-messages-general=The component is typically placed inside an [vdldoc:crystal:form] in order to render messages within the context of a form.
crystal-messages-general-example-1=Render *all* messages in a `&lt;ul&gt;` (the default)
crystal-messages-general-example-2=Render *all* messages in a `&lt;table&gt;`
crystal-messages-general-example-3=Render *only global* messages in a `&lt;ul&gt;`
crystal-outputformat=[javadoc:com.liferay.faces.crystal.component.outputformat.OutputFormat] is a [javadoc:javax.faces.component.UIOutput] component that renders *parameterized* text. Since it extends [javadoc:javax.faces.component.html.HtmlOutputFormat], it supports all the features of [vdldoc:h:outputFormat].
crystal-outputformat-general=The [vdldoc:crystal:outputFormat:value] attribute can contain *parameterized text* in the same manner as [javadoc:java.text.MessageFormat] and parameter substitution is accomplished via [vdldoc:f:param] child tags.
crystal-outputlabel=[javadoc:com.liferay.faces.crystal.component.outputlabel.OutputLabel] is a [javadoc:javax.faces.component.UIOutput] component that renders its [vdldoc:crystal:outputLabel:value] attribute within a `&lt;label&gt;` element. Since it extends [javadoc:javax.faces.component.html.HtmlOutputLabel], it supports all the features of [vdldoc:h:outputLabel].
crystal-outputlabel-general=The [vdldoc:crystal:outputLabel:value] attribute can be *bound to a message-bundle property* via EL in order to render internationalized labels.<br/><br/>If the component is *associated* with an input component like [vdldoc:crystal:inputText] via the [vdldoc:crystal:outputLabel:for] attribute, then a validation [javadoc:javax.faces.application.FacesMessage] that is queued for the associated component will use the [vdldoc:crystal:outputLabel:value] of the label. This provides the end-user with a better context as to which input field failed validation.
crystal-outputlink=[javadoc:com.liferay.faces.crystal.component.outputlink.OutputLink] is a [javadoc:javax.faces.component.UIOutput] component that renders an `&lt;a&gt;` element (hyperlink). Since it extends [javadoc:javax.faces.component.html.HtmlOutputLink], it supports all the features of [vdldoc:h:outputLink].
crystal-outputlink-benefits-description=is intended to be used to render a simple `&lt;a href="..."&gt;hyperlink&lt;/a&gt;` that requests a URL via HTTP GET.
crystal-outputlink-general=The [vdldoc:crystal:outputLink:value] of the component is rendered as the `href` attribute and the children of the component are rendered as the text/content of the hyperlink.
crystal-outputlink-general-example-1=Specifying text for the hyperlink
crystal-outputlink-general-example-2=Specifying an image for the hyperlink
crystal-outputlink-general-example-3=Specifying URL parameters with [vdldoc:f:param]
crystal-outputlink-conversion=The [vdldoc:crystal:outputLink:value] attribute can be *converted* via the [vdldoc:crystal:outputLink:converter] attribute or by specifying an [vdldoc:f:converter] type of child tag. In addition, custom user feedback can be specified via the [vdldoc:crystal:outputLink:converterMessage] attribute.
crystal-outputscript=[javadoc:com.liferay.faces.crystal.component.outputlink.OutputScript] is a [javadoc:javax.faces.component.UIOutput] component that renders a `&lt;script&gt;` element with `type="text/javascript"`. It supports all the features of [vdldoc:h:outputScript] and adds the [vdldoc:crystal:outputScript:use] attribute which provides the ability to specify CrystalUI or YUI modules as dependencies.
crystal-outputscript-general=The script can be rendered in different *positions* on the page via the [vdldoc:crystal:outputScript:target] attribute. Valid values include <code>body</code>, <code>form</code>, and <code>head</code>. The default value of this attribute is an empty (null) value which causes the <code>&lt;script&gt;</code> to be rendered inline (corresponding to its position in the view). Specifying <code>body</code> for the target attribute will cause the <code>&lt;script&gt;</code> to be rendered as close to the closing body tag as possible.
crystal-outputscript-general-example-1=Script rendered inline
crystal-outputscript-general-example-2=Script rendered at the bottom of the page
crystal-outputscript-general-script-1=This `&lt;script&gt;` is rendered inline because the [vdldoc:crystal:outputScript:target] attribute is not specified. The drawback of inline scripts is that they block rendering of the rest of the page.
crystal-outputscript-general-script-2=This `&lt;script&gt;` is rendered immediately before the closing `&lt;/body&gt;` tag because [vdldoc:crystal:outputScript:target]=`body`. The benefit of rendering scripts before the closing `&lt;/body&gt;` tag is that they do not block rendering of the rest of the page.
crystal-outputscript-resource=A JavaScript resource can be added to the page by specifying the [vdldoc:crystal:outputScript:library] and [vdldoc:crystal:outputScript:name] attributes.
crystal-outputstylesheet=[javadoc:com.liferay.faces.crystal.component.outputlink.OutputStylesheet] is a [javadoc:javax.faces.component.UIOutput] component that renders a `&lt;style&gt;` element.
crystal-outputstylesheet-general=CSS classes can be specified *inline* or included from external *resource* files.
crystal-outputstylesheet-general-example-1=Specifying a CSS class inline
crystal-outputstylesheet-general-example-2=Specifying a CSS class from a JSF resource
crystal-outputtext=[javadoc:com.liferay.faces.crystal.component.outputtext.OutputText] is a [javadoc:javax.faces.component.UIOutput] component that renders its own value as text. Since it extends [javadoc:javax.faces.component.html.HtmlOutputText], it supports all the features of [vdldoc:h:outputText].
crystal-outputtext-general=The [vdldoc:crystal:outputText:value] attribute can be *bound* to a model bean property via EL.
crystal-outputtext-conversion=The [vdldoc:crystal:outputText:value] attribute can be *converted* by specifying an [vdldoc:f:converter] type of child tag.
crystal-outputtext-right-to-left=The component supports *Right-To-Left* language input by setting the [vdldoc:crystal:outputText:dir] and [vdldoc:crystal:outputText:lang] attributes.
crystal-panel=[javadoc:com.liferay.faces.crystal.component.panel.Panel] is a [javadoc:javax.faces.component.UIPanel] component that renders a `&lt;div&gt;` element with *three* child `&lt;div&gt;` elements (one for header, body, and footer). Since it extends [javadoc:javax.faces.component.html.HtmlPanelGroup], it supports all the features of [vdldoc:h:panelGroup].
crystal-panel-general=The component is generally used to specify a *header* and/or *footer* in order to decorate child content.
crystal-panel-general-example-1=Specifying the `header` and `footer` facets
crystal-panel-general-example-2=Specifying the [vdldoc:crystal:panel:headerText] and [vdldoc:crystal:panel:footerText] attributes
crystal-panelgrid=[javadoc:com.liferay.faces.crystal.component.panelgrid.PanelGrid] is a [javadoc:javax.faces.component.UIPanel] component that renders a `&lt;table&gt;` element to layout its children in a tabular grid. Since it extends [javadoc:javax.faces.component.html.HtmlPanelGrid], it supports all the features of [vdldoc:h:panelGrid].
crystal-panelgrid-general=The [vdldoc:crystal:panelGrid:columns] attribute specifies how many table columns are rendered. A new table row will be rendered if the number of children exceeds the number of columns.
crystal-panelgroup=[javadoc:com.liferay.faces.crystal.component.panelgroup.PanelGroup] is a [javadoc:javax.faces.component.UIPanel] component that renders a `&lt;span&gt;` or a `&lt;div&gt;` element for grouping purposes. Since it extends [javadoc:javax.faces.component.html.HtmlPanelGroup], it supports all the features of [vdldoc:h:panelGroup].
crystal-panelgroup-general=The [vdldoc:crystal:panelGroup:layout] attribute specifies whether the component renders a `span` or a `div`.
crystal-panelgroup-general-example-1=By default, the component renders a `span`.
crystal-panelgroup-general-example-2=Specifying `block` for the [vdldoc:crystal:panelGroup:layout] attribute causes the component to render a `div`.
crystal-row=[javadoc:com.liferay.faces.crystal.component.row.Row] is a [javadoc:javax.faces.component.UIPanel] component that renders a `&lt;div&gt;` and is designed to be used in conjunction with [vdldoc:crystal:column] child component tags.
crystal-row-general=The component takes [vdldoc:crystal:column] tags as children in order to layout components in a tabular grid.
crystal-row-column-width=The *width* of an [vdldoc:crystal:column] can be specified via the [vdldoc:crystal:column:width] attribute.
crystal-row-column-offset=The *offset width* of an [vdldoc:crystal:column] can be specified via the [vdldoc:crystal:column:offsetWidth] attribute.
crystal-selectbooleancheckbox=[javadoc:com.liferay.faces.crystal.component.selectbooleancheckbox.SelectBooleanCheckbox] is a [javadoc:javax.faces.component.UISelectBoolean] component that renders a checkbox. Since it extends [javadoc:javax.faces.component.html.HtmlSelectBooleanCheckbox], it supports all the features of [vdldoc:h:selectBooleanCheckbox].
crystal-selectbooleancheckbox-general=The [vdldoc:crystal:selectBooleanCheckbox:value] of the component *must* be of type `boolean` or [javadoc:java.lang.Boolean].
crystal-selectbooleancheckbox-instant-ajax=The component supports *instant Ajax* by simply adding [vdldoc:f:ajax] as a child tag.
crystal-selectbooleancheckbox-immediate=When the [vdldoc:crystal:selectBooleanCheckbox:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
crystal-selectmanycheckbox=[javadoc:com.liferay.faces.crystal.component.selectmanycheckbox.SelectManyCheckbox] is a [javadoc:javax.faces.component.UISelectMany] component that renders checkboxes and enables the user to select multiple values. Since it extends [javadoc:javax.faces.component.html.HtmlSelectManyCheckbox], it supports all the features of [vdldoc:h:selectManyCheckbox] such as accepting [vdldoc:f:selectItem] or [vdldoc:f:selectItems] as child tags.
crystal-selectmanycheckbox-conversion=The [vdldoc:crystal:selectManyCheckbox:value] attribute can be *converted* by specifying an [vdldoc:f:converter] child tag.
crystal-selectmanycheckbox-data-model=The component will display *dynamically* when the [vdldoc:f:selectItems:value] attribute of the child [vdldoc:f:selectItems] tag is bound via EL to a model bean property (which is wrapped implicitly by JSF with a [javadoc:javax.faces.model.DataModel]). The [vdldoc:f:selectItems:var] attribute of the child [vdldoc:f:selectItems] tag is used to introduce a variable name into the EL when iterating over the model.
crystal-selectmanycheckbox-default-value=A *default value* can specified using when the [vdldoc:crystal:selectManyCheckbox:value] attribute is bound via EL to a model bean property.
crystal-selectmanycheckbox-general=The [vdldoc:crystal:selectManyCheckbox:value] attribute can be *bound* to a model bean property via EL.
crystal-selectmanycheckbox-instant-ajax=The component supports *instant Ajax* by simply adding [vdldoc:f:ajax] as a child tag.
crystal-selectmanycheckbox-vertical-layout=Setting the value of the [vdldoc:crystal:selectManyCheckbox:layout] attribute to `pageDirection` will cause the component to render with a *vertical layout*.
crystal-selectmanycheckbox-immediate=When the [vdldoc:crystal:selectManyCheckbox:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
crystal-selectmanylistbox=[javadoc:com.liferay.faces.crystal.component.selectmanylistbox.SelectManyListbox] is a [javadoc:javax.faces.component.UISelectMany] component that renders a `select` element and enables the user to select multiple values. Since it extends [javadoc:javax.faces.component.html.HtmlSelectManyListbox], it supports all the features of [vdldoc:h:selectManyListbox] such as accepting [vdldoc:f:selectItem] or [vdldoc:f:selectItems] as child tags.
crystal-selectmanylistbox-conversion=The [vdldoc:crystal:selectManyListbox:value] attribute can be *converted* by specifying an [vdldoc:f:converter] child tag.
crystal-selectmanylistbox-data-model=The component will display *dynamically* when the [vdldoc:f:selectItems:value] attribute of the child [vdldoc:f:selectItems] tag is bound via EL to a model bean property (which is wrapped implicitly by JSF with a [javadoc:javax.faces.model.DataModel]). The [vdldoc:f:selectItems:var] attribute of the child [vdldoc:f:selectItems] tag is used to introduce a variable name into the EL when iterating over the model.
crystal-selectmanylistbox-default-value=A *default value* can specified using when the [vdldoc:crystal:selectManyListbox:value] attribute is bound via EL to a model bean property.
crystal-selectmanylistbox-general=The [vdldoc:crystal:selectManyListbox:value] attribute can be *bound* to a model bean property via EL, and the [vdldoc:crystal:selectManyListbox:size] can be specified.
crystal-selectmanylistbox-instant-ajax=The component supports *instant Ajax* by simply adding [vdldoc:f:ajax] as a child tag.
crystal-selectmanylistbox-immediate=When the [vdldoc:crystal:selectManyListbox:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
crystal-selectmanymenu=[javadoc:com.liferay.faces.crystal.component.selectmanymenu.SelectManyMenu] is a [javadoc:javax.faces.component.UISelectMany] component that renders a `select` element and enables the user to select multiple values. *It has the same basic features of* [vdldoc:crystal:selectManyListbox] *except that there is no `size` attribute because JSF "select&#42;menu" components always render `size=1`*. Since it extends [javadoc:javax.faces.component.html.HtmlSelectManyMenu], it supports all the features of [vdldoc:h:selectManyMenu] such as accepting [vdldoc:f:selectItem] or [vdldoc:f:selectItems] as child tags.
crystal-selectmanymenu-conversion=The [vdldoc:crystal:selectManyMenu:value] attribute can be *converted* by specifying an [vdldoc:f:converter] child tag.
crystal-selectmanymenu-data-model=The component will display *dynamically* when the [vdldoc:f:selectItems:value] attribute of the child [vdldoc:f:selectItems] tag is bound via EL to a model bean property (which is wrapped implicitly by JSF with a [javadoc:javax.faces.model.DataModel]). The [vdldoc:f:selectItems:var] attribute of the child [vdldoc:f:selectItems] tag is used to introduce a variable name into the EL when iterating over the model.
crystal-selectmanymenu-default-value=A *default value* can specified using when the [vdldoc:crystal:selectManyMenu:value] attribute is bound via EL to a model bean property.
crystal-selectmanymenu-general=The [vdldoc:crystal:selectManyMenu:value] attribute can be *bound* to a model bean property via EL.
crystal-selectmanymenu-instant-ajax=The component supports *instant Ajax* by simply adding [vdldoc:f:ajax] as a child tag.
crystal-selectmanymenu-immediate=When the [vdldoc:crystal:selectManyMenu:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
crystal-selectonelistbox=[javadoc:com.liferay.faces.crystal.component.selectonelistbox.SelectOneListbox] is a [javadoc:javax.faces.component.UISelectOne] component that renders a `select` element (multi-item list) and enables the user to select one value. Since it extends [javadoc:javax.faces.component.html.HtmlSelectOneListbox], it supports all the features of [vdldoc:h:selectOneListbox] such as accepting [vdldoc:f:selectItem] or [vdldoc:f:selectItems] as child tags.
crystal-selectonelistbox-conversion=The [vdldoc:crystal:selectOneListbox:value] attribute can be *converted* by specifying an [vdldoc:f:converter] child tag.
crystal-selectonelistbox-data-model=The component will display *dynamically* when the [vdldoc:f:selectItems:value] attribute of the child [vdldoc:f:selectItems] tag is bound via EL to a model bean property (which is wrapped implicitly by JSF with a [javadoc:javax.faces.model.DataModel]). The [vdldoc:f:selectItems:var] attribute of the child [vdldoc:f:selectItems] tag is used to introduce a variable name into the EL when iterating over the model.
crystal-selectonelistbox-default-value=A *default value* can specified using when the [vdldoc:crystal:selectOneListbox:value] attribute is bound via EL to a model bean property.
crystal-selectonelistbox-general=The [vdldoc:crystal:selectOneListbox:value] attribute can be *bound* to a model bean property via EL, and the [vdldoc:crystal:selectOneListbox:size] can be specified.
crystal-selectonelistbox-instant-ajax=The [vdldoc:crystal:selectOneListbox:value] attribute can be *bound* to a model bean property via EL.
crystal-selectonelistbox-immediate=The [vdldoc:crystal:selectOneListbox:value] attribute can be *bound* to a model bean property via EL.
crystal-selectonemenu=[javadoc:com.liferay.faces.crystal.component.selectonemenu.SelectOneMenu] is a [javadoc:javax.faces.component.UISelectOne] component that renders a `select` element (drop down list) and enables the user to select one value. Since it extends [javadoc:javax.faces.component.html.HtmlSelectOneMenu], it supports all the features of [vdldoc:h:selectOneMenu] such as accepting [vdldoc:f:selectItem] or [vdldoc:f:selectItems] as child tags.
crystal-selectonemenu-conversion=The [vdldoc:crystal:selectOneMenu:value] attribute can be *converted* by specifying an [vdldoc:f:converter] child tag.
crystal-selectonemenu-data-model=The component will display *dynamically* when the [vdldoc:f:selectItems:value] attribute of the child [vdldoc:f:selectItems] tag is bound via EL to a model bean property (which is wrapped implicitly by JSF with a [javadoc:javax.faces.model.DataModel]). The [vdldoc:f:selectItems:var] attribute of the child [vdldoc:f:selectItems] tag is used to introduce a variable name into the EL when iterating over the model.
crystal-selectonemenu-default-value=A *default value* can specified using when the [vdldoc:crystal:selectOneMenu:value] attribute is bound via EL to a model bean property.
crystal-selectonemenu-general=The [vdldoc:crystal:selectOneMenu:value] attribute can be *bound* to a model bean property via EL.
crystal-selectonemenu-instant-ajax=The component supports *instant Ajax* by simply adding [vdldoc:f:ajax] as a child tag.
crystal-selectonemenu-immediate=When the [vdldoc:crystal:selectOneMenu:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
crystal-selectoneradio=[javadoc:com.liferay.faces.crystal.component.selectoneradio.SelectOneRadio] is a [javadoc:javax.faces.component.UISelectOne] component that renders radio buttons. Since it extends [javadoc:javax.faces.component.html.HtmlSelectOneRadio], it supports all the features of [vdldoc:h:selectOneRadio] such as accepting [vdldoc:f:selectItem] or [vdldoc:f:selectItems] as child tags.
crystal-selectoneradio-conversion=The [vdldoc:crystal:selectOneRadio:value] attribute can be *converted* by specifying an [vdldoc:f:converter] child tag.
crystal-selectoneradio-data-model=The component will display *dynamically* when the [vdldoc:f:selectItems:value] attribute of the child [vdldoc:f:selectItems] tag is bound via EL to a model bean property (which is wrapped implicitly by JSF with a [javadoc:javax.faces.model.DataModel]). The [vdldoc:f:selectItems:var] attribute of the child [vdldoc:f:selectItems] tag is used to introduce a variable name into the EL when iterating over the model.
crystal-selectoneradio-default-value=A *default value* can specified using when the [vdldoc:crystal:selectOneRadio:value] attribute is bound via EL to a model bean property.
crystal-selectoneradio-general=The [vdldoc:crystal:selectOneRadio:value] attribute can be *bound* to a model bean property via EL.
crystal-selectoneradio-instant-ajax=The component supports *instant Ajax* by simply adding [vdldoc:f:ajax] as a child tag.
crystal-selectoneradio-immediate=When the [vdldoc:crystal:selectOneRadio:immediate] attribute is `true`, the submitted value is converted and validated during *APPLY_REQUEST_VALUES* phase of the JSF lifecycle, rather than the normal PROCESS_VALIDATIONS phase.
crystal-selectoneradio-vertical-layout=Setting the value of the [vdldoc:crystal:selectOneRadio:layout] attribute to `pageDirection` will cause the component to render with a *vertical layout*.
crystal-video=[javadoc:com.liferay.faces.crystal.component.Video is a [javadoc:javax.faces.component.UIComponent] that renders a `&lt;div&gt;` that contains an HTML5 `&lt;video&gt;` element.  It also supports graceful degradation for older browsers.
crystal-video-general=The general usage of the component is to set the [vdldoc:crystal:video:value] attribute to a [javadoc:java.lang.String] video URL. Degradation to a Flash player can be enabled via the [vdldoc:crystal:video:degrade] attribute (defaults to true).
crystal-video-general-example-1=Context-relative path to a resource via the [vdldoc:crystal:video:value] attribute
crystal-video-general-example-2=JSF resource via the `#{resource}` EL keyword
crystal-video-general-example-3=JSF resource via the Crystal [javadoc:com.liferay.faces.crystal.component.resource.Resource] component
crystal-video-general-example-4=JSF resource via the [vdldoc:crystal:video:library] and [vdldoc:crystal:video:name] attributes
crystal-video-graceful-degradation=The component supports graceful degradation for older browsers using the <a href="http://get.adobe.com/flashplayer/" target="_blank">Adobe&reg; Flash&reg; Player</a> bundled with CrystalUI. If no value is specified in the `&lt;crystal:video&gt;` tag, then the video from the first child `&lt;crystal:resource&gt;` tag is used.<br/><br/>A different player can be specified via the [vdldoc:crystal:video:flashPlayer] attribute. Additional  `&lt;param&gt;` tags can be inserted into the Adobe&reg; Flash&reg player's `&lt;object&gt;` tag by specifying an [vdldoc:f:facet] with `name="flash"`.<br/><br/><em>Adobe&reg; Flash&reg; is a registered trademark of Adobe Systems Incorporated.</em>
crystal-video-graceful-degradation-example-1=Adobe&reg; Flash&reg; Player<br/>(Pre-HTML5 Browser Required)
crystal-video-alternate-formats=The component supports supplying alternate videos to support different browsers.
crystal-video-alternate-formats-example-1=Supplying alternate videos via [vdldoc:crystal:resource] child tags.
crystal-video-alternate-formats-example-2=Supplying alternate videos via supplying a collection of Crystal [javadoc:com.liferay.faces.crystal.component.resource.Resource]s in the [vdldoc:crystal:video:value] attribute.
crystal-video-html5-passthrough=The component can be utilized as an HTML5 passthrough element. *(Requires JSF 2.2+)*
note-tomcat-max-file-size=The default limit for the `com.liferay.faces.util.uploadedFileMaxSize` context-param is 104857600 bytes (100MB). But in order to support that limit, it may be necessary to set `&lt;Connector <a href="https://tomcat.apache.org/tomcat-7.0-doc/config/http.html" target="_blank">maxPostSize</a>=104857600"&gt;` in tomcat/conf/server.xml since the default value is only 2097152 bytes (2MB).
